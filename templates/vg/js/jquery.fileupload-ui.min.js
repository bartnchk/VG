"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e){"function"==typeof define&&define.amd?define(["jquery","blueimp-tmpl","./jquery.fileupload-image","./jquery.fileupload-audio","./jquery.fileupload-video","./jquery.fileupload-validate"],e):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?e(require("jquery"),require("blueimp-tmpl"),require("./jquery.fileupload-image"),require("./jquery.fileupload-audio"),require("./jquery.fileupload-video"),require("./jquery.fileupload-validate")):e(window.jQuery,window.tmpl)}(function(e,t){e.blueimp.fileupload.prototype._specialOptions.push("filesContainer","uploadTemplateId","downloadTemplateId"),e.widget("blueimp.fileupload",e.blueimp.fileupload,{options:{autoUpload:!1,uploadTemplateId:"template-upload",downloadTemplateId:"template-download",filesContainer:void 0,prependFiles:!1,dataType:"json",messages:{unknownError:"Unknown error"},getNumberOfFiles:function(){return this.filesContainer.children().not(".processing").length},getFilesFromResponse:function(t){return t.result&&e.isArray(t.result.files)?t.result.files:[]},add:function(t,i){if(t.isDefaultPrevented())return!1;var n=e(this),o=n.data("blueimp-fileupload")||n.data("fileupload"),r=o.options;i.context=o._renderUpload(i.files).data("data",i).addClass("processing"),r.filesContainer[r.prependFiles?"prepend":"append"](i.context),o._forceReflow(i.context),o._transition(i.context),i.process(function(){return n.fileupload("process",i)}).always(function(){i.context.each(function(t){e(this).find(".size").text(o._formatFileSize(i.files[t].size))}).removeClass("processing"),o._renderPreviews(i)}).done(function(){i.context.find(".start").prop("disabled",!1),!1!==o._trigger("added",t,i)&&(r.autoUpload||i.autoUpload)&&!1!==i.autoUpload&&i.submit()}).fail(function(){i.files.error&&i.context.each(function(t){var n=i.files[t].error;n&&e(this).find(".error").text(n)})})},send:function(t,i){if(t.isDefaultPrevented())return!1;var n=e(this).data("blueimp-fileupload")||e(this).data("fileupload");return i.context&&i.dataType&&"iframe"===i.dataType.substr(0,6)&&i.context.find(".progress").addClass(!e.support.transition&&"progress-animated").attr("aria-valuenow",100).children().first().css("width","100%"),n._trigger("sent",t,i)},done:function(t,i){if(t.isDefaultPrevented())return!1;var n,o,r=e(this).data("blueimp-fileupload")||e(this).data("fileupload"),a=i.getFilesFromResponse||r.options.getFilesFromResponse,s=a(i);i.context?i.context.each(function(a){var d=s[a]||{error:"Empty file upload result"};o=r._addFinishedDeferreds(),r._transition(e(this)).done(function(){var a=e(this);n=r._renderDownload([d]).replaceAll(a),r._forceReflow(n),r._transition(n).done(function(){i.context=e(this),r._trigger("completed",t,i),r._trigger("finished",t,i),o.resolve()})})}):(n=r._renderDownload(s)[r.options.prependFiles?"prependTo":"appendTo"](r.options.filesContainer),r._forceReflow(n),o=r._addFinishedDeferreds(),r._transition(n).done(function(){i.context=e(this),r._trigger("completed",t,i),r._trigger("finished",t,i),o.resolve()}))},fail:function(t,i){if(t.isDefaultPrevented())return!1;var n,o,r=e(this).data("blueimp-fileupload")||e(this).data("fileupload");i.context?i.context.each(function(a){if("abort"!==i.errorThrown){var s=i.files[a];s.error=s.error||i.errorThrown||i.i18n("unknownError"),o=r._addFinishedDeferreds(),r._transition(e(this)).done(function(){var a=e(this);n=r._renderDownload([s]).replaceAll(a),r._forceReflow(n),r._transition(n).done(function(){i.context=e(this),r._trigger("failed",t,i),r._trigger("finished",t,i),o.resolve()})})}else o=r._addFinishedDeferreds(),r._transition(e(this)).done(function(){e(this).remove(),r._trigger("failed",t,i),r._trigger("finished",t,i),o.resolve()})}):"abort"!==i.errorThrown?(i.context=r._renderUpload(i.files)[r.options.prependFiles?"prependTo":"appendTo"](r.options.filesContainer).data("data",i),r._forceReflow(i.context),o=r._addFinishedDeferreds(),r._transition(i.context).done(function(){i.context=e(this),r._trigger("failed",t,i),r._trigger("finished",t,i),o.resolve()})):(r._trigger("failed",t,i),r._trigger("finished",t,i),r._addFinishedDeferreds().resolve())},progress:function(t,i){if(t.isDefaultPrevented())return!1;var n=Math.floor(i.loaded/i.total*100);i.context&&i.context.each(function(){e(this).find(".progress").attr("aria-valuenow",n).children().first().css("width",n+"%")})},progressall:function(t,i){if(t.isDefaultPrevented())return!1;var n=e(this),o=Math.floor(i.loaded/i.total*100),r=n.find(".fileupload-progress"),a=r.find(".progress-extended");a.length&&a.html((n.data("blueimp-fileupload")||n.data("fileupload"))._renderExtendedProgress(i)),r.find(".progress").attr("aria-valuenow",o).children().first().css("width",o+"%")},start:function(t){if(t.isDefaultPrevented())return!1;var i=e(this).data("blueimp-fileupload")||e(this).data("fileupload");i._resetFinishedDeferreds(),i._transition(e(this).find(".fileupload-progress")).done(function(){i._trigger("started",t)})},stop:function(t){if(t.isDefaultPrevented())return!1;var i=e(this).data("blueimp-fileupload")||e(this).data("fileupload"),n=i._addFinishedDeferreds();e.when.apply(e,i._getFinishedDeferreds()).done(function(){i._trigger("stopped",t)}),i._transition(e(this).find(".fileupload-progress")).done(function(){e(this).find(".progress").attr("aria-valuenow","0").children().first().css("width","0%"),e(this).find(".progress-extended").html("&nbsp;"),n.resolve()})},processstart:function(t){if(t.isDefaultPrevented())return!1;e(this).addClass("fileupload-processing")},processstop:function(t){if(t.isDefaultPrevented())return!1;e(this).removeClass("fileupload-processing")},destroy:function(t,i){if(t.isDefaultPrevented())return!1;var n=e(this).data("blueimp-fileupload")||e(this).data("fileupload"),o=function(){n._transition(i.context).done(function(){e(this).remove(),n._trigger("destroyed",t,i)})};i.url?(i.dataType=i.dataType||n.options.dataType,e.ajax(i).done(o).fail(function(){n._trigger("destroyfailed",t,i)})):o()}},_resetFinishedDeferreds:function(){this._finishedUploads=[]},_addFinishedDeferreds:function(t){return t||(t=e.Deferred()),this._finishedUploads.push(t),t},_getFinishedDeferreds:function(){return this._finishedUploads},_enableDragToDesktop:function(){var t=e(this),i=t.prop("href"),n=t.prop("download");t.bind("dragstart",function(e){try{e.originalEvent.dataTransfer.setData("DownloadURL",["application/octet-stream",n,i].join(":"))}catch(e){}})},_formatFileSize:function(e){return"number"!=typeof e?"":e>=1e9?(e/1e9).toFixed(2)+" GB":e>=1e6?(e/1e6).toFixed(2)+" MB":(e/1e3).toFixed(2)+" KB"},_formatBitrate:function(e){return"number"!=typeof e?"":e>=1e9?(e/1e9).toFixed(2)+" Gbit/s":e>=1e6?(e/1e6).toFixed(2)+" Mbit/s":e>=1e3?(e/1e3).toFixed(2)+" kbit/s":e.toFixed(2)+" bit/s"},_formatTime:function(e){var t=new Date(1e3*e),i=Math.floor(e/86400);return(i=i?i+"d ":"")+("0"+t.getUTCHours()).slice(-2)+":"+("0"+t.getUTCMinutes()).slice(-2)+":"+("0"+t.getUTCSeconds()).slice(-2)},_formatPercentage:function(e){return(100*e).toFixed(2)+" %"},_renderExtendedProgress:function(e){return this._formatBitrate(e.bitrate)+" | "+this._formatTime(8*(e.total-e.loaded)/e.bitrate)+" | "+this._formatPercentage(e.loaded/e.total)+" | "+this._formatFileSize(e.loaded)+" / "+this._formatFileSize(e.total)},_renderTemplate:function(t,i){if(!t)return e();var n=t({files:i,formatFileSize:this._formatFileSize,options:this.options});return n instanceof e?n:e(this.options.templatesContainer).html(n).children()},_renderPreviews:function(t){t.context.find(".preview").each(function(i,n){e(n).append(t.files[i].preview)})},_renderUpload:function(e){return this._renderTemplate(this.options.uploadTemplate,e)},_renderDownload:function(e){return this._renderTemplate(this.options.downloadTemplate,e).find("a[download]").each(this._enableDragToDesktop).end()},_startHandler:function(t){t.preventDefault();var i=e(t.currentTarget),n=i.closest(".template-upload"),o=n.data("data");i.prop("disabled",!0),o&&o.submit&&o.submit()},_cancelHandler:function(t){t.preventDefault();var i=e(t.currentTarget).closest(".template-upload,.template-download"),n=i.data("data")||{};n.context=n.context||i,n.abort?n.abort():(n.errorThrown="abort",this._trigger("fail",t,n))},_deleteHandler:function(t){t.preventDefault();var i=e(t.currentTarget);this._trigger("destroy",t,e.extend({context:i.closest(".template-download"),type:"DELETE"},i.data()))},_forceReflow:function(t){return e.support.transition&&t.length&&t[0].offsetWidth},_transition:function(t){var i=e.Deferred();return e.support.transition&&t.hasClass("fade")&&t.is(":visible")?t.bind(e.support.transition.end,function(n){n.target===t[0]&&(t.unbind(e.support.transition.end),i.resolveWith(t))}).toggleClass("in"):(t.toggleClass("in"),i.resolveWith(t)),i},_initButtonBarEventHandlers:function(){var t=this.element.find(".fileupload-buttonbar"),i=this.options.filesContainer;this._on(t.find(".start"),{click:function(e){e.preventDefault(),i.find(".start").click()}}),this._on(t.find(".cancel"),{click:function(e){e.preventDefault(),i.find(".cancel").click()}}),this._on(t.find(".delete"),{click:function(e){e.preventDefault(),i.find(".toggle:checked").closest(".template-download").find(".delete").click(),t.find(".toggle").prop("checked",!1)}}),this._on(t.find(".toggle"),{change:function(t){i.find(".toggle").prop("checked",e(t.currentTarget).is(":checked"))}})},_destroyButtonBarEventHandlers:function(){this._off(this.element.find(".fileupload-buttonbar").find(".start, .cancel, .delete"),"click"),this._off(this.element.find(".fileupload-buttonbar .toggle"),"change.")},_initEventHandlers:function(){this._super(),this._on(this.options.filesContainer,{"click .start":this._startHandler,"click .cancel":this._cancelHandler,"click .delete":this._deleteHandler}),this._initButtonBarEventHandlers()},_destroyEventHandlers:function(){this._destroyButtonBarEventHandlers(),this._off(this.options.filesContainer,"click"),this._super()},_enableFileInputButton:function(){this.element.find(".fileinput-button input").prop("disabled",!1).parent().removeClass("disabled")},_disableFileInputButton:function(){this.element.find(".fileinput-button input").prop("disabled",!0).parent().addClass("disabled")},_initTemplates:function(){var e=this.options;e.templatesContainer=this.document[0].createElement(e.filesContainer.prop("nodeName")),t&&(e.uploadTemplateId&&(e.uploadTemplate=t(e.uploadTemplateId)),e.downloadTemplateId&&(e.downloadTemplate=t(e.downloadTemplateId)))},_initFilesContainer:function(){var t=this.options;void 0===t.filesContainer?t.filesContainer=this.element.find(".files"):t.filesContainer instanceof e||(t.filesContainer=e(t.filesContainer))},_initSpecialOptions:function(){this._super(),this._initFilesContainer(),this._initTemplates()},_create:function(){this._super(),this._resetFinishedDeferreds(),e.support.fileInput||this._disableFileInputButton()},enable:function(){var e=!1;this.options.disabled&&(e=!0),this._super(),e&&(this.element.find("input, button").prop("disabled",!1),this._enableFileInputButton())},disable:function(){this.options.disabled||(this.element.find("input, button").prop("disabled",!0),this._disableFileInputButton()),this._super()}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5maWxldXBsb2FkLXVpLmpzIl0sIm5hbWVzIjpbImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJyZXF1aXJlIiwid2luZG93IiwiYmx1ZWltcCIsImZpbGV1cGxvYWQiLCJ3aWRnZXQiLCJqUXVlcnkiLCJvcHRpb25zIiwidG1wbCIsIiQiLCJ1cGxvYWRUZW1wbGF0ZUlkIiwiX3NwZWNpYWxPcHRpb25zIiwicHVzaCIsImRvd25sb2FkVGVtcGxhdGVJZCIsInByZXBlbmRGaWxlcyIsIm1lc3NhZ2VzIiwiZmlsZXNDb250YWluZXIiLCJkYXRhVHlwZSIsInVua25vd25FcnJvciIsImdldE51bWJlck9mRmlsZXMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJ0aGlzIiwiY2hpbGRyZW4iLCJub3QiLCJsZW5ndGgiLCJkYXRhIiwidGhhdCIsIl9yZW5kZXJVcGxvYWQiLCJfZm9yY2VSZWZsb3ciLCJjb250ZXh0IiwiX3JlbmRlclByZXZpZXdzIiwiZG9uZSIsInN1Ym1pdCIsIiR0aGlzIiwiZmlsZXMiLCJlcnJvciIsImluZGV4IiwiYWRkQ2xhc3MiLCJfdHJhbnNpdGlvbiIsInByb2Nlc3MiLCJhbHdheXMiLCJlIiwiZmluZCIsInRleHQiLCJfZm9ybWF0RmlsZVNpemUiLCJzaXplIiwicHJvcCIsImF1dG9VcGxvYWQiLCJfdHJpZ2dlciIsImZhaWwiLCJlYWNoIiwiZ2V0RmlsZXNGcm9tUmVzcG9uc2UiLCJkZWZlcnJlZCIsInN1cHBvcnQiLCJ0cmFuc2l0aW9uIiwiX2FkZEZpbmlzaGVkRGVmZXJyZWRzIiwicmVzb2x2ZSIsInRlbXBsYXRlIiwiZmlsZSIsIm5vZGUiLCJfcmVuZGVyRG93bmxvYWQiLCJlcnJvclRocm93biIsInByb2dyZXNzIiwiaTE4biIsInJlcGxhY2VBbGwiLCJmbG9vciIsImdsb2JhbFByb2dyZXNzTm9kZSIsImV4dGVuZGVkUHJvZ3Jlc3NOb2RlIiwiaHRtbCIsImF0dHIiLCJfcmVzZXRGaW5pc2hlZERlZmVycmVkcyIsImFwcGx5IiwicHJvY2Vzc3N0b3AiLCJyZW1vdmVDbGFzcyIsImxvYWRlZCIsInRvdGFsIiwicmVtb3ZlTm9kZSIsInJlbW92ZSIsIk1hdGgiLCJfZmluaXNoZWRVcGxvYWRzIiwiZmlyc3QiLCJjc3MiLCJfZ2V0RmluaXNoZWREZWZlcnJlZHMiLCJzdGFydCIsIl9lbmFibGVEcmFnVG9EZXNrdG9wIiwidXJsIiwibGluayIsInR5cGUiLCJvcmlnaW5hbEV2ZW50IiwiZGF0YVRyYW5zZmVyIiwic2V0RGF0YSIsImJ5dGVzIiwicHJvY2Vzc3N0YXJ0IiwiYml0cyIsIl9mb3JtYXRUaW1lIiwiZGF5cyIsInNlY29uZHMiLCJkZXN0cm95IiwiX2Zvcm1hdFBlcmNlbnRhZ2UiLCJfcmVuZGVyRXh0ZW5kZWRQcm9ncmVzcyIsIl9mb3JtYXRCaXRyYXRlIiwiYml0cmF0ZSIsInJlc3VsdCIsImZ1bmMiLCJmb3JtYXRGaWxlU2l6ZSIsIkRlZmVycmVkIiwiYnV0dG9uIiwiYmluZCIsIl9jYW5jZWxIYW5kbGVyIiwicHJldmVudERlZmF1bHQiLCJjdXJyZW50VGFyZ2V0IiwiY2xvc2VzdCIsImlnbm9yZSIsInRvRml4ZWQiLCJlbmQiLCJ0YXJnZXQiLCJkZmQiLCJyZXNvbHZlV2l0aCIsInRvZ2dsZUNsYXNzIiwiZGF0ZSIsImdldFVUQ0hvdXJzIiwic2xpY2UiLCJnZXRVVENNaW51dGVzIiwiX2luaXRCdXR0b25CYXJFdmVudEhhbmRsZXJzIiwiZmlsZVVwbG9hZEJ1dHRvbkJhciIsImNsaWNrIiwiZmlsZXNMaXN0IiwiY2hhbmdlIiwiX2Rlc3Ryb3lCdXR0b25CYXJFdmVudEhhbmRsZXJzIiwiX29mZiIsInRlbXBsYXRlc0NvbnRhaW5lciIsIl9pbml0RXZlbnRIYW5kbGVycyIsIl9zdXBlciIsImVsbSIsIl9vbiIsImFwcGVuZCIsInByZXZpZXciLCJ1cGxvYWRUZW1wbGF0ZSIsIl9yZW5kZXJUZW1wbGF0ZSIsImRvd25sb2FkVGVtcGxhdGUiLCJfZW5hYmxlRmlsZUlucHV0QnV0dG9uIiwiZWxlbWVudCIsIl9kaXNhYmxlRmlsZUlucHV0QnV0dG9uIiwiX2luaXRUZW1wbGF0ZXMiLCJfaW5pdEZpbGVzQ29udGFpbmVyIiwiX2RlbGV0ZUhhbmRsZXIiLCJfaW5pdFNwZWNpYWxPcHRpb25zIiwiZXh0ZW5kIiwiZmlsZUlucHV0IiwiZW5hYmxlIiwid2FzRGlzYWJsZWQiLCJoYXNDbGFzcyIsImlzIiwiY2xpY2sgLnN0YXJ0IiwiX3N0YXJ0SGFuZGxlciIsImNsaWNrIC5jYW5jZWwiLCJjbGljayAuZGVsZXRlIiwiX2Rlc3Ryb3lFdmVudEhhbmRsZXJzIiwicGFyZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidW5kZWZpbmVkIiwiX2NyZWF0ZSIsImRpc2FibGVkIiwiZGlzYWJsZSJdLCJtYXBwaW5ncyI6Im9PQWNFLFNBQVVBLEdBRlosa0JBQUFDLFNBQUFBLE9BQUFDLElBRUVELFFBQ0UsU0FLUSxlQUpKLDRCQUNBLDRCQUNBQSw0QkFRRyxnQ0FDSEQsR0FDQSxZQUFBQSxtQkFDSUcsU0FESkgsWUFBQUEsUUFDSUcsVUFRSkgsRUFDQUEsUUFDSUksVUFHUEQsUUFBQSxnQkFDSEEsUUFBQSw2QkFDRUEsUUFBQSw2QkFYUUEsUUFBUSw2QkFhZEUsUUFBUUMsaUNBUVJDLEVBZk1ILE9BQU9JLE9BaUJYQyxPQUFTQyxPQUdMLFNBQUFDLEVBQUFELEdBR0FFLEVBQUFBLFFBQUFBLFdBQUFBLFVBQWtCQyxnQkFOYkMsS0FPTCxpQkFDQUMsbUJBQ0Esc0JBS0FDLEVBQUFBLE9BQUFBLHFCQWRLTCxFQUFBTixRQUFBQyxZQWdCTEcsU0FJQVEsWUFBVSxFQUFBTCxpQkFwQkwsa0JBd0JMRyxtQkFBQSxvQkFHSUcsbUJBQVlBLEdBSWhCRixjQUFBLEVBR1FHLFNBQUEsT0FHUEYsVUFoQkdHLGFBQWMsaUJBc0JkQyxpQkFBTUMsV0FDRixNQUFBQyxNQUFPTCxlQUFQTSxXQUNIQyxJQUFBLGVBQUFDLFFBS0RDLHFCQUFlQyxTQUFLQyxHQUdwQnBCLE1BQUFBLEdBQVFTLFFBQUFBLEVBQUFBLFFBQ0pULEVBQVFPLE9B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UVMsa0JBSTNDa0ksb0JBQXFCLFdBQ2pCN0gsS0FBSytHLFNBQ0wvRyxLQUFLMkgsc0JBQ0wzSCxLQUFLMEgsa0JBR1RtQixRQUFTLFdBQ0w3SSxLQUFLK0csU0FDTC9HLEtBQUtpRCwwQkFDQTdELEVBQUU0QyxRQUFRK0YsV0FDWC9ILEtBQUt5SCwyQkFJYk8sT0FBUSxXQUNKLEdBQUlDLElBQWMsQ0FDZGpJLE1BQUtkLFFBQVE0SixXQUNiYixHQUFjLEdBRWxCakksS0FBSytHLFNBQ0RrQixJQUNBakksS0FBS3dILFFBQVFuRyxLQUFLLGlCQUFpQkksS0FBSyxZQUFZLEdBQ3BEekIsS0FBS3VILDJCQUlid0IsUUFBUyxXQUNBL0ksS0FBS2QsUUFBUTRKLFdBQ2Q5SSxLQUFLd0gsUUFBUW5HLEtBQUssaUJBQWlCSSxLQUFLLFlBQVksR0FDcER6QixLQUFLeUgsMkJBRVR6SCxLQUFLK0ciLCJmaWxlIjoianF1ZXJ5LmZpbGV1cGxvYWQtdWkubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIGpRdWVyeSBGaWxlIFVwbG9hZCBVc2VyIEludGVyZmFjZSBQbHVnaW5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ibHVlaW1wL2pRdWVyeS1GaWxlLVVwbG9hZFxuICpcbiAqIENvcHlyaWdodCAyMDEwLCBTZWJhc3RpYW4gVHNjaGFuXG4gKiBodHRwczovL2JsdWVpbXAubmV0XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqL1xuXG4vKiBqc2hpbnQgbm9tZW46ZmFsc2UgKi9cbi8qIGdsb2JhbCBkZWZpbmUsIHJlcXVpcmUsIHdpbmRvdyAqL1xuXG47KGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIEFNRCBtb2R1bGU6XG4gICAgICAgIGRlZmluZShbXG4gICAgICAgICAgICAnanF1ZXJ5JyxcbiAgICAgICAgICAgICdibHVlaW1wLXRtcGwnLFxuICAgICAgICAgICAgJy4vanF1ZXJ5LmZpbGV1cGxvYWQtaW1hZ2UnLFxuICAgICAgICAgICAgJy4vanF1ZXJ5LmZpbGV1cGxvYWQtYXVkaW8nLFxuICAgICAgICAgICAgJy4vanF1ZXJ5LmZpbGV1cGxvYWQtdmlkZW8nLFxuICAgICAgICAgICAgJy4vanF1ZXJ5LmZpbGV1cGxvYWQtdmFsaWRhdGUnXG4gICAgICAgIF0sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIE5vZGUvQ29tbW9uSlM6XG4gICAgICAgIGZhY3RvcnkoXG4gICAgICAgICAgICByZXF1aXJlKCdqcXVlcnknKSxcbiAgICAgICAgICAgIHJlcXVpcmUoJ2JsdWVpbXAtdG1wbCcpLFxuICAgICAgICAgICAgcmVxdWlyZSgnLi9qcXVlcnkuZmlsZXVwbG9hZC1pbWFnZScpLFxuICAgICAgICAgICAgcmVxdWlyZSgnLi9qcXVlcnkuZmlsZXVwbG9hZC1hdWRpbycpLFxuICAgICAgICAgICAgcmVxdWlyZSgnLi9qcXVlcnkuZmlsZXVwbG9hZC12aWRlbycpLFxuICAgICAgICAgICAgcmVxdWlyZSgnLi9qcXVlcnkuZmlsZXVwbG9hZC12YWxpZGF0ZScpXG4gICAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzOlxuICAgICAgICBmYWN0b3J5KFxuICAgICAgICAgICAgd2luZG93LmpRdWVyeSxcbiAgICAgICAgICAgIHdpbmRvdy50bXBsXG4gICAgICAgICk7XG4gICAgfVxufShmdW5jdGlvbiAoJCwgdG1wbCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgICQuYmx1ZWltcC5maWxldXBsb2FkLnByb3RvdHlwZS5fc3BlY2lhbE9wdGlvbnMucHVzaChcbiAgICAgICAgJ2ZpbGVzQ29udGFpbmVyJyxcbiAgICAgICAgJ3VwbG9hZFRlbXBsYXRlSWQnLFxuICAgICAgICAnZG93bmxvYWRUZW1wbGF0ZUlkJ1xuICAgICk7XG5cbiAgICAvLyBUaGUgVUkgdmVyc2lvbiBleHRlbmRzIHRoZSBmaWxlIHVwbG9hZCB3aWRnZXRcbiAgICAvLyBhbmQgYWRkcyBjb21wbGV0ZSB1c2VyIGludGVyZmFjZSBpbnRlcmFjdGlvbjpcbiAgICAkLndpZGdldCgnYmx1ZWltcC5maWxldXBsb2FkJywgJC5ibHVlaW1wLmZpbGV1cGxvYWQsIHtcblxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAvLyBCeSBkZWZhdWx0LCBmaWxlcyBhZGRlZCB0byB0aGUgd2lkZ2V0IGFyZSB1cGxvYWRlZCBhcyBzb29uXG4gICAgICAgICAgICAvLyBhcyB0aGUgdXNlciBjbGlja3Mgb24gdGhlIHN0YXJ0IGJ1dHRvbnMuIFRvIGVuYWJsZSBhdXRvbWF0aWNcbiAgICAgICAgICAgIC8vIHVwbG9hZHMsIHNldCB0aGUgZm9sbG93aW5nIG9wdGlvbiB0byB0cnVlOlxuICAgICAgICAgICAgYXV0b1VwbG9hZDogZmFsc2UsXG4gICAgICAgICAgICAvLyBUaGUgSUQgb2YgdGhlIHVwbG9hZCB0ZW1wbGF0ZTpcbiAgICAgICAgICAgIHVwbG9hZFRlbXBsYXRlSWQ6ICd0ZW1wbGF0ZS11cGxvYWQnLFxuICAgICAgICAgICAgLy8gVGhlIElEIG9mIHRoZSBkb3dubG9hZCB0ZW1wbGF0ZTpcbiAgICAgICAgICAgIGRvd25sb2FkVGVtcGxhdGVJZDogJ3RlbXBsYXRlLWRvd25sb2FkJyxcbiAgICAgICAgICAgIC8vIFRoZSBjb250YWluZXIgZm9yIHRoZSBsaXN0IG9mIGZpbGVzLiBJZiB1bmRlZmluZWQsIGl0IGlzIHNldCB0b1xuICAgICAgICAgICAgLy8gYW4gZWxlbWVudCB3aXRoIGNsYXNzIFwiZmlsZXNcIiBpbnNpZGUgb2YgdGhlIHdpZGdldCBlbGVtZW50OlxuICAgICAgICAgICAgZmlsZXNDb250YWluZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZSBhcHBlbmRlZCB0byB0aGUgZmlsZXMgY29udGFpbmVyLlxuICAgICAgICAgICAgLy8gU2V0IHRoZSBmb2xsb3dpbmcgb3B0aW9uIHRvIHRydWUsIHRvIHByZXBlbmQgZmlsZXMgaW5zdGVhZDpcbiAgICAgICAgICAgIHByZXBlbmRGaWxlczogZmFsc2UsXG4gICAgICAgICAgICAvLyBUaGUgZXhwZWN0ZWQgZGF0YSB0eXBlIG9mIHRoZSB1cGxvYWQgcmVzcG9uc2UsIHNldHMgdGhlIGRhdGFUeXBlXG4gICAgICAgICAgICAvLyBvcHRpb24gb2YgdGhlICQuYWpheCB1cGxvYWQgcmVxdWVzdHM6XG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuXG4gICAgICAgICAgICAvLyBFcnJvciBhbmQgaW5mbyBtZXNzYWdlczpcbiAgICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICAgICAgdW5rbm93bkVycm9yOiAnVW5rbm93biBlcnJvcidcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIEZ1bmN0aW9uIHJldHVybmluZyB0aGUgY3VycmVudCBudW1iZXIgb2YgZmlsZXMsXG4gICAgICAgICAgICAvLyB1c2VkIGJ5IHRoZSBtYXhOdW1iZXJPZkZpbGVzIHZhbGlkYXRpb246XG4gICAgICAgICAgICBnZXROdW1iZXJPZkZpbGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsZXNDb250YWluZXIuY2hpbGRyZW4oKVxuICAgICAgICAgICAgICAgICAgICAubm90KCcucHJvY2Vzc2luZycpLmxlbmd0aDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIENhbGxiYWNrIHRvIHJldHJpZXZlIHRoZSBsaXN0IG9mIGZpbGVzIGZyb20gdGhlIHNlcnZlciByZXNwb25zZTpcbiAgICAgICAgICAgIGdldEZpbGVzRnJvbVJlc3BvbnNlOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnJlc3VsdCAmJiAkLmlzQXJyYXkoZGF0YS5yZXN1bHQuZmlsZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnJlc3VsdC5maWxlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy8gVGhlIGFkZCBjYWxsYmFjayBpcyBpbnZva2VkIGFzIHNvb24gYXMgZmlsZXMgYXJlIGFkZGVkIHRvIHRoZSBmaWxldXBsb2FkXG4gICAgICAgICAgICAvLyB3aWRnZXQgKHZpYSBmaWxlIGlucHV0IHNlbGVjdGlvbiwgZHJhZyAmIGRyb3Agb3IgYWRkIEFQSSBjYWxsKS5cbiAgICAgICAgICAgIC8vIFNlZSB0aGUgYmFzaWMgZmlsZSB1cGxvYWQgd2lkZ2V0IGZvciBtb3JlIGluZm9ybWF0aW9uOlxuICAgICAgICAgICAgYWRkOiBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgdGhhdCA9ICR0aGlzLmRhdGEoJ2JsdWVpbXAtZmlsZXVwbG9hZCcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdmaWxldXBsb2FkJyksXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB0aGF0Lm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgZGF0YS5jb250ZXh0ID0gdGhhdC5fcmVuZGVyVXBsb2FkKGRhdGEuZmlsZXMpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKCdkYXRhJywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdwcm9jZXNzaW5nJyk7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5maWxlc0NvbnRhaW5lcltcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wcmVwZW5kRmlsZXMgPyAncHJlcGVuZCcgOiAnYXBwZW5kJ1xuICAgICAgICAgICAgICAgIF0oZGF0YS5jb250ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGF0Ll9mb3JjZVJlZmxvdyhkYXRhLmNvbnRleHQpO1xuICAgICAgICAgICAgICAgIHRoYXQuX3RyYW5zaXRpb24oZGF0YS5jb250ZXh0KTtcbiAgICAgICAgICAgICAgICBkYXRhLnByb2Nlc3MoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMuZmlsZXVwbG9hZCgncHJvY2VzcycsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGV4dC5lYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCcuc2l6ZScpLnRleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fZm9ybWF0RmlsZVNpemUoZGF0YS5maWxlc1tpbmRleF0uc2l6ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pLnJlbW92ZUNsYXNzKCdwcm9jZXNzaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3JlbmRlclByZXZpZXdzKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbnRleHQuZmluZCgnLnN0YXJ0JykucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgodGhhdC5fdHJpZ2dlcignYWRkZWQnLCBlLCBkYXRhKSAhPT0gZmFsc2UpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9wdGlvbnMuYXV0b1VwbG9hZCB8fCBkYXRhLmF1dG9VcGxvYWQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5hdXRvVXBsb2FkICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zdWJtaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLmZhaWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5maWxlcy5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb250ZXh0LmVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gZGF0YS5maWxlc1tpbmRleF0uZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnLmVycm9yJykudGV4dChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBDYWxsYmFjayBmb3IgdGhlIHN0YXJ0IG9mIGVhY2ggZmlsZSB1cGxvYWQgcmVxdWVzdDpcbiAgICAgICAgICAgIHNlbmQ6IGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9ICQodGhpcykuZGF0YSgnYmx1ZWltcC1maWxldXBsb2FkJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZGF0YSgnZmlsZXVwbG9hZCcpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmNvbnRleHQgJiYgZGF0YS5kYXRhVHlwZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhVHlwZS5zdWJzdHIoMCwgNikgPT09ICdpZnJhbWUnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmcmFtZSBUcmFuc3BvcnQgZG9lcyBub3Qgc3VwcG9ydCBwcm9ncmVzcyBldmVudHMuXG4gICAgICAgICAgICAgICAgICAgIC8vIEluIGxhY2sgb2YgYW4gaW5kZXRlcm1pbmF0ZSBwcm9ncmVzcyBiYXIsIHdlIHNldFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgcHJvZ3Jlc3MgdG8gMTAwJSwgc2hvd2luZyB0aGUgZnVsbCBhbmltYXRlZCBiYXI6XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5wcm9ncmVzcycpLmFkZENsYXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICEkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAncHJvZ3Jlc3MtYW5pbWF0ZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS12YWx1ZW5vdycsIDEwMClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpLmZpcnN0KCkuY3NzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEwMCUnXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5fdHJpZ2dlcignc2VudCcsIGUsIGRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIENhbGxiYWNrIGZvciBzdWNjZXNzZnVsIHVwbG9hZHM6XG4gICAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSAkKHRoaXMpLmRhdGEoJ2JsdWVpbXAtZmlsZXVwbG9hZCcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRhdGEoJ2ZpbGV1cGxvYWQnKSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0RmlsZXNGcm9tUmVzcG9uc2UgPSBkYXRhLmdldEZpbGVzRnJvbVJlc3BvbnNlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuZ2V0RmlsZXNGcm9tUmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgIGZpbGVzID0gZ2V0RmlsZXNGcm9tUmVzcG9uc2UoZGF0YSksXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlLFxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZDtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5jb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGV4dC5lYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBmaWxlc1tpbmRleF0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Vycm9yOiAnRW1wdHkgZmlsZSB1cGxvYWQgcmVzdWx0J307XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZCA9IHRoYXQuX2FkZEZpbmlzaGVkRGVmZXJyZWRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll90cmFuc2l0aW9uKCQodGhpcykpLmRvbmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gdGhhdC5fcmVuZGVyRG93bmxvYWQoW2ZpbGVdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VBbGwobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2ZvcmNlUmVmbG93KHRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJhbnNpdGlvbih0ZW1wbGF0ZSkuZG9uZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbnRleHQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3RyaWdnZXIoJ2NvbXBsZXRlZCcsIGUsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3RyaWdnZXIoJ2ZpbmlzaGVkJywgZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gdGhhdC5fcmVuZGVyRG93bmxvYWQoZmlsZXMpW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLnByZXBlbmRGaWxlcyA/ICdwcmVwZW5kVG8nIDogJ2FwcGVuZFRvJ1xuICAgICAgICAgICAgICAgICAgICBdKHRoYXQub3B0aW9ucy5maWxlc0NvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX2ZvcmNlUmVmbG93KHRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQgPSB0aGF0Ll9hZGRGaW5pc2hlZERlZmVycmVkcygpO1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll90cmFuc2l0aW9uKHRlbXBsYXRlKS5kb25lKFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGV4dCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJpZ2dlcignY29tcGxldGVkJywgZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJpZ2dlcignZmluaXNoZWQnLCBlLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIENhbGxiYWNrIGZvciBmYWlsZWQgKGFib3J0IG9yIGVycm9yKSB1cGxvYWRzOlxuICAgICAgICAgICAgZmFpbDogZnVuY3Rpb24gKGUsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gJCh0aGlzKS5kYXRhKCdibHVlaW1wLWZpbGV1cGxvYWQnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5kYXRhKCdmaWxldXBsb2FkJyksXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlLFxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZDtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5jb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGV4dC5lYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZXJyb3JUaHJvd24gIT09ICdhYm9ydCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IGRhdGEuZmlsZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUuZXJyb3IgPSBmaWxlLmVycm9yIHx8IGRhdGEuZXJyb3JUaHJvd24gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pMThuKCd1bmtub3duRXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZCA9IHRoYXQuX2FkZEZpbmlzaGVkRGVmZXJyZWRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJhbnNpdGlvbigkKHRoaXMpKS5kb25lKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IHRoYXQuX3JlbmRlckRvd25sb2FkKFtmaWxlXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZUFsbChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2ZvcmNlUmVmbG93KHRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3RyYW5zaXRpb24odGVtcGxhdGUpLmRvbmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbnRleHQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll90cmlnZ2VyKCdmYWlsZWQnLCBlLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJpZ2dlcignZmluaXNoZWQnLCBlLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZCA9IHRoYXQuX2FkZEZpbmlzaGVkRGVmZXJyZWRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJhbnNpdGlvbigkKHRoaXMpKS5kb25lKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJpZ2dlcignZmFpbGVkJywgZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll90cmlnZ2VyKCdmaW5pc2hlZCcsIGUsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLmVycm9yVGhyb3duICE9PSAnYWJvcnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGV4dCA9IHRoYXQuX3JlbmRlclVwbG9hZChkYXRhLmZpbGVzKVtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQub3B0aW9ucy5wcmVwZW5kRmlsZXMgPyAncHJlcGVuZFRvJyA6ICdhcHBlbmRUbydcbiAgICAgICAgICAgICAgICAgICAgXSh0aGF0Lm9wdGlvbnMuZmlsZXNDb250YWluZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0YSgnZGF0YScsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9mb3JjZVJlZmxvdyhkYXRhLmNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZCA9IHRoYXQuX2FkZEZpbmlzaGVkRGVmZXJyZWRzKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3RyYW5zaXRpb24oZGF0YS5jb250ZXh0KS5kb25lKFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGV4dCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJpZ2dlcignZmFpbGVkJywgZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJpZ2dlcignZmluaXNoZWQnLCBlLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJpZ2dlcignZmFpbGVkJywgZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3RyaWdnZXIoJ2ZpbmlzaGVkJywgZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX2FkZEZpbmlzaGVkRGVmZXJyZWRzKCkucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBDYWxsYmFjayBmb3IgdXBsb2FkIHByb2dyZXNzIGV2ZW50czpcbiAgICAgICAgICAgIHByb2dyZXNzOiBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHByb2dyZXNzID0gTWF0aC5mbG9vcihkYXRhLmxvYWRlZCAvIGRhdGEudG90YWwgKiAxMDApO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jb250ZXh0LmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCcucHJvZ3Jlc3MnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLXZhbHVlbm93JywgcHJvZ3Jlc3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKCkuZmlyc3QoKS5jc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzICsgJyUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIENhbGxiYWNrIGZvciBnbG9iYWwgdXBsb2FkIHByb2dyZXNzIGV2ZW50czpcbiAgICAgICAgICAgIHByb2dyZXNzYWxsOiBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLmZsb29yKGRhdGEubG9hZGVkIC8gZGF0YS50b3RhbCAqIDEwMCksXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFByb2dyZXNzTm9kZSA9ICR0aGlzLmZpbmQoJy5maWxldXBsb2FkLXByb2dyZXNzJyksXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZGVkUHJvZ3Jlc3NOb2RlID0gZ2xvYmFsUHJvZ3Jlc3NOb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLnByb2dyZXNzLWV4dGVuZGVkJyk7XG4gICAgICAgICAgICAgICAgaWYgKGV4dGVuZGVkUHJvZ3Jlc3NOb2RlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBleHRlbmRlZFByb2dyZXNzTm9kZS5odG1sKFxuICAgICAgICAgICAgICAgICAgICAgICAgKCR0aGlzLmRhdGEoJ2JsdWVpbXAtZmlsZXVwbG9hZCcpIHx8ICR0aGlzLmRhdGEoJ2ZpbGV1cGxvYWQnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuX3JlbmRlckV4dGVuZGVkUHJvZ3Jlc3MoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2xvYmFsUHJvZ3Jlc3NOb2RlXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKCcucHJvZ3Jlc3MnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS12YWx1ZW5vdycsIHByb2dyZXNzKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oKS5maXJzdCgpLmNzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcyArICclJ1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIENhbGxiYWNrIGZvciB1cGxvYWRzIHN0YXJ0LCBlcXVpdmFsZW50IHRvIHRoZSBnbG9iYWwgYWpheFN0YXJ0IGV2ZW50OlxuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9ICQodGhpcykuZGF0YSgnYmx1ZWltcC1maWxldXBsb2FkJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZGF0YSgnZmlsZXVwbG9hZCcpO1xuICAgICAgICAgICAgICAgIHRoYXQuX3Jlc2V0RmluaXNoZWREZWZlcnJlZHMoKTtcbiAgICAgICAgICAgICAgICB0aGF0Ll90cmFuc2l0aW9uKCQodGhpcykuZmluZCgnLmZpbGV1cGxvYWQtcHJvZ3Jlc3MnKSkuZG9uZShcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJpZ2dlcignc3RhcnRlZCcsIGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBDYWxsYmFjayBmb3IgdXBsb2FkcyBzdG9wLCBlcXVpdmFsZW50IHRvIHRoZSBnbG9iYWwgYWpheFN0b3AgZXZlbnQ6XG4gICAgICAgICAgICBzdG9wOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSAkKHRoaXMpLmRhdGEoJ2JsdWVpbXAtZmlsZXVwbG9hZCcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRhdGEoJ2ZpbGV1cGxvYWQnKSxcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQgPSB0aGF0Ll9hZGRGaW5pc2hlZERlZmVycmVkcygpO1xuICAgICAgICAgICAgICAgICQud2hlbi5hcHBseSgkLCB0aGF0Ll9nZXRGaW5pc2hlZERlZmVycmVkcygpKVxuICAgICAgICAgICAgICAgICAgICAuZG9uZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll90cmlnZ2VyKCdzdG9wcGVkJywgZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoYXQuX3RyYW5zaXRpb24oJCh0aGlzKS5maW5kKCcuZmlsZXVwbG9hZC1wcm9ncmVzcycpKS5kb25lKFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJy5wcm9ncmVzcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtdmFsdWVub3cnLCAnMCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKCkuZmlyc3QoKS5jc3MoJ3dpZHRoJywgJzAlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJy5wcm9ncmVzcy1leHRlbmRlZCcpLmh0bWwoJyZuYnNwOycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9jZXNzc3RhcnQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdmaWxldXBsb2FkLXByb2Nlc3NpbmcnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9jZXNzc3RvcDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2ZpbGV1cGxvYWQtcHJvY2Vzc2luZycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIENhbGxiYWNrIGZvciBmaWxlIGRlbGV0aW9uOlxuICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKGUsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gJCh0aGlzKS5kYXRhKCdibHVlaW1wLWZpbGV1cGxvYWQnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5kYXRhKCdmaWxldXBsb2FkJyksXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll90cmFuc2l0aW9uKGRhdGEuY29udGV4dCkuZG9uZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3RyaWdnZXIoJ2Rlc3Ryb3llZCcsIGUsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEudXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YVR5cGUgPSBkYXRhLmRhdGFUeXBlIHx8IHRoYXQub3B0aW9ucy5kYXRhVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgJC5hamF4KGRhdGEpLmRvbmUocmVtb3ZlTm9kZSkuZmFpbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll90cmlnZ2VyKCdkZXN0cm95ZmFpbGVkJywgZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3Jlc2V0RmluaXNoZWREZWZlcnJlZHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpbmlzaGVkVXBsb2FkcyA9IFtdO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9hZGRGaW5pc2hlZERlZmVycmVkczogZnVuY3Rpb24gKGRlZmVycmVkKSB7XG4gICAgICAgICAgICBpZiAoIWRlZmVycmVkKSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9maW5pc2hlZFVwbG9hZHMucHVzaChkZWZlcnJlZCk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2dldEZpbmlzaGVkRGVmZXJyZWRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmluaXNoZWRVcGxvYWRzO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIExpbmsgaGFuZGxlciwgdGhhdCBhbGxvd3MgdG8gZG93bmxvYWQgZmlsZXNcbiAgICAgICAgLy8gYnkgZHJhZyAmIGRyb3Agb2YgdGhlIGxpbmtzIHRvIHRoZSBkZXNrdG9wOlxuICAgICAgICBfZW5hYmxlRHJhZ1RvRGVza3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxpbmsgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgIHVybCA9IGxpbmsucHJvcCgnaHJlZicpLFxuICAgICAgICAgICAgICAgIG5hbWUgPSBsaW5rLnByb3AoJ2Rvd25sb2FkJyksXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nO1xuICAgICAgICAgICAgbGluay5iaW5kKCdkcmFnc3RhcnQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGUub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YShcbiAgICAgICAgICAgICAgICAgICAgICAgICdEb3dubG9hZFVSTCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBbdHlwZSwgbmFtZSwgdXJsXS5qb2luKCc6JylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBfZm9ybWF0RmlsZVNpemU6IGZ1bmN0aW9uIChieXRlcykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBieXRlcyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnl0ZXMgPj0gMTAwMDAwMDAwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoYnl0ZXMgLyAxMDAwMDAwMDAwKS50b0ZpeGVkKDIpICsgJyBHQic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnl0ZXMgPj0gMTAwMDAwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoYnl0ZXMgLyAxMDAwMDAwKS50b0ZpeGVkKDIpICsgJyBNQic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKGJ5dGVzIC8gMTAwMCkudG9GaXhlZCgyKSArICcgS0InO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9mb3JtYXRCaXRyYXRlOiBmdW5jdGlvbiAoYml0cykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBiaXRzICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiaXRzID49IDEwMDAwMDAwMDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGJpdHMgLyAxMDAwMDAwMDAwKS50b0ZpeGVkKDIpICsgJyBHYml0L3MnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJpdHMgPj0gMTAwMDAwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoYml0cyAvIDEwMDAwMDApLnRvRml4ZWQoMikgKyAnIE1iaXQvcyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYml0cyA+PSAxMDAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChiaXRzIC8gMTAwMCkudG9GaXhlZCgyKSArICcga2JpdC9zJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiaXRzLnRvRml4ZWQoMikgKyAnIGJpdC9zJztcbiAgICAgICAgfSxcblxuICAgICAgICBfZm9ybWF0VGltZTogZnVuY3Rpb24gKHNlY29uZHMpIHtcbiAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoc2Vjb25kcyAqIDEwMDApLFxuICAgICAgICAgICAgICAgIGRheXMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA4NjQwMCk7XG4gICAgICAgICAgICBkYXlzID0gZGF5cyA/IGRheXMgKyAnZCAnIDogJyc7XG4gICAgICAgICAgICByZXR1cm4gZGF5cyArXG4gICAgICAgICAgICAgICAgKCcwJyArIGRhdGUuZ2V0VVRDSG91cnMoKSkuc2xpY2UoLTIpICsgJzonICtcbiAgICAgICAgICAgICAgICAoJzAnICsgZGF0ZS5nZXRVVENNaW51dGVzKCkpLnNsaWNlKC0yKSArICc6JyArXG4gICAgICAgICAgICAgICAgKCcwJyArIGRhdGUuZ2V0VVRDU2Vjb25kcygpKS5zbGljZSgtMik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2Zvcm1hdFBlcmNlbnRhZ2U6IGZ1bmN0aW9uIChmbG9hdFZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gKGZsb2F0VmFsdWUgKiAxMDApLnRvRml4ZWQoMikgKyAnICUnO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9yZW5kZXJFeHRlbmRlZFByb2dyZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdEJpdHJhdGUoZGF0YS5iaXRyYXRlKSArICcgfCAnICtcbiAgICAgICAgICAgICAgICB0aGlzLl9mb3JtYXRUaW1lKFxuICAgICAgICAgICAgICAgICAgICAoZGF0YS50b3RhbCAtIGRhdGEubG9hZGVkKSAqIDggLyBkYXRhLmJpdHJhdGVcbiAgICAgICAgICAgICAgICApICsgJyB8ICcgK1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zvcm1hdFBlcmNlbnRhZ2UoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubG9hZGVkIC8gZGF0YS50b3RhbFxuICAgICAgICAgICAgICAgICkgKyAnIHwgJyArXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9ybWF0RmlsZVNpemUoZGF0YS5sb2FkZWQpICsgJyAvICcgK1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zvcm1hdEZpbGVTaXplKGRhdGEudG90YWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9yZW5kZXJUZW1wbGF0ZTogZnVuY3Rpb24gKGZ1bmMsIGZpbGVzKSB7XG4gICAgICAgICAgICBpZiAoIWZ1bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMoe1xuICAgICAgICAgICAgICAgIGZpbGVzOiBmaWxlcyxcbiAgICAgICAgICAgICAgICBmb3JtYXRGaWxlU2l6ZTogdGhpcy5fZm9ybWF0RmlsZVNpemUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiAkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAkKHRoaXMub3B0aW9ucy50ZW1wbGF0ZXNDb250YWluZXIpLmh0bWwocmVzdWx0KS5jaGlsZHJlbigpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9yZW5kZXJQcmV2aWV3czogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGRhdGEuY29udGV4dC5maW5kKCcucHJldmlldycpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbG0pIHtcbiAgICAgICAgICAgICAgICAkKGVsbSkuYXBwZW5kKGRhdGEuZmlsZXNbaW5kZXhdLnByZXZpZXcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3JlbmRlclVwbG9hZDogZnVuY3Rpb24gKGZpbGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyVGVtcGxhdGUoXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnVwbG9hZFRlbXBsYXRlLFxuICAgICAgICAgICAgICAgIGZpbGVzXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9yZW5kZXJEb3dubG9hZDogZnVuY3Rpb24gKGZpbGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyVGVtcGxhdGUoXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRvd25sb2FkVGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgZmlsZXNcbiAgICAgICAgICAgICkuZmluZCgnYVtkb3dubG9hZF0nKS5lYWNoKHRoaXMuX2VuYWJsZURyYWdUb0Rlc2t0b3ApLmVuZCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9zdGFydEhhbmRsZXI6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgYnV0dG9uID0gJChlLmN1cnJlbnRUYXJnZXQpLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gYnV0dG9uLmNsb3Nlc3QoJy50ZW1wbGF0ZS11cGxvYWQnKSxcbiAgICAgICAgICAgICAgICBkYXRhID0gdGVtcGxhdGUuZGF0YSgnZGF0YScpO1xuICAgICAgICAgICAgYnV0dG9uLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnN1Ym1pdCkge1xuICAgICAgICAgICAgICAgIGRhdGEuc3VibWl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2NhbmNlbEhhbmRsZXI6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAkKGUuY3VycmVudFRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy50ZW1wbGF0ZS11cGxvYWQsLnRlbXBsYXRlLWRvd25sb2FkJyksXG4gICAgICAgICAgICAgICAgZGF0YSA9IHRlbXBsYXRlLmRhdGEoJ2RhdGEnKSB8fCB7fTtcbiAgICAgICAgICAgIGRhdGEuY29udGV4dCA9IGRhdGEuY29udGV4dCB8fCB0ZW1wbGF0ZTtcbiAgICAgICAgICAgIGlmIChkYXRhLmFib3J0KSB7XG4gICAgICAgICAgICAgICAgZGF0YS5hYm9ydCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhLmVycm9yVGhyb3duID0gJ2Fib3J0JztcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdmYWlsJywgZSwgZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2RlbGV0ZUhhbmRsZXI6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgYnV0dG9uID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignZGVzdHJveScsIGUsICQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBjb250ZXh0OiBidXR0b24uY2xvc2VzdCgnLnRlbXBsYXRlLWRvd25sb2FkJyksXG4gICAgICAgICAgICAgICAgdHlwZTogJ0RFTEVURSdcbiAgICAgICAgICAgIH0sIGJ1dHRvbi5kYXRhKCkpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBfZm9yY2VSZWZsb3c6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgbm9kZS5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICBub2RlWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICB9LFxuXG4gICAgICAgIF90cmFuc2l0aW9uOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgdmFyIGRmZCA9ICQuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIGlmICgkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiBub2RlLmhhc0NsYXNzKCdmYWRlJykgJiYgbm9kZS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgIG5vZGUuYmluZChcbiAgICAgICAgICAgICAgICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGRvbid0IHJlc3BvbmQgdG8gb3RoZXIgdHJhbnNpdGlvbnMgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiB0aGUgY29udGFpbmVyIGVsZW1lbnQsIGUuZy4gZnJvbSBidXR0b24gZWxlbWVudHM6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IG5vZGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnVuYmluZCgkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRmZC5yZXNvbHZlV2l0aChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICkudG9nZ2xlQ2xhc3MoJ2luJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vZGUudG9nZ2xlQ2xhc3MoJ2luJyk7XG4gICAgICAgICAgICAgICAgZGZkLnJlc29sdmVXaXRoKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRmZDtcbiAgICAgICAgfSxcblxuICAgICAgICBfaW5pdEJ1dHRvbkJhckV2ZW50SGFuZGxlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBmaWxlVXBsb2FkQnV0dG9uQmFyID0gdGhpcy5lbGVtZW50LmZpbmQoJy5maWxldXBsb2FkLWJ1dHRvbmJhcicpLFxuICAgICAgICAgICAgICAgIGZpbGVzTGlzdCA9IHRoaXMub3B0aW9ucy5maWxlc0NvbnRhaW5lcjtcbiAgICAgICAgICAgIHRoaXMuX29uKGZpbGVVcGxvYWRCdXR0b25CYXIuZmluZCgnLnN0YXJ0JyksIHtcbiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBmaWxlc0xpc3QuZmluZCgnLnN0YXJ0JykuY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX29uKGZpbGVVcGxvYWRCdXR0b25CYXIuZmluZCgnLmNhbmNlbCcpLCB7XG4gICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZmlsZXNMaXN0LmZpbmQoJy5jYW5jZWwnKS5jbGljaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fb24oZmlsZVVwbG9hZEJ1dHRvbkJhci5maW5kKCcuZGVsZXRlJyksIHtcbiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBmaWxlc0xpc3QuZmluZCgnLnRvZ2dsZTpjaGVja2VkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcudGVtcGxhdGUtZG93bmxvYWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5kZWxldGUnKS5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICBmaWxlVXBsb2FkQnV0dG9uQmFyLmZpbmQoJy50b2dnbGUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9vbihmaWxlVXBsb2FkQnV0dG9uQmFyLmZpbmQoJy50b2dnbGUnKSwge1xuICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZXNMaXN0LmZpbmQoJy50b2dnbGUnKS5wcm9wKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NoZWNrZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLmlzKCc6Y2hlY2tlZCcpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2Rlc3Ryb3lCdXR0b25CYXJFdmVudEhhbmRsZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9vZmYoXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmZpbmQoJy5maWxldXBsb2FkLWJ1dHRvbmJhcicpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKCcuc3RhcnQsIC5jYW5jZWwsIC5kZWxldGUnKSxcbiAgICAgICAgICAgICAgICAnY2xpY2snXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5fb2ZmKFxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5maW5kKCcuZmlsZXVwbG9hZC1idXR0b25iYXIgLnRvZ2dsZScpLFxuICAgICAgICAgICAgICAgICdjaGFuZ2UuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcblxuICAgICAgICBfaW5pdEV2ZW50SGFuZGxlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgICAgICB0aGlzLl9vbih0aGlzLm9wdGlvbnMuZmlsZXNDb250YWluZXIsIHtcbiAgICAgICAgICAgICAgICAnY2xpY2sgLnN0YXJ0JzogdGhpcy5fc3RhcnRIYW5kbGVyLFxuICAgICAgICAgICAgICAgICdjbGljayAuY2FuY2VsJzogdGhpcy5fY2FuY2VsSGFuZGxlcixcbiAgICAgICAgICAgICAgICAnY2xpY2sgLmRlbGV0ZSc6IHRoaXMuX2RlbGV0ZUhhbmRsZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5faW5pdEJ1dHRvbkJhckV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBfZGVzdHJveUV2ZW50SGFuZGxlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lCdXR0b25CYXJFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgICAgICB0aGlzLl9vZmYodGhpcy5vcHRpb25zLmZpbGVzQ29udGFpbmVyLCAnY2xpY2snKTtcbiAgICAgICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2VuYWJsZUZpbGVJbnB1dEJ1dHRvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmZpbmQoJy5maWxlaW5wdXQtYnV0dG9uIGlucHV0JylcbiAgICAgICAgICAgICAgICAucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2Rpc2FibGVGaWxlSW5wdXRCdXR0b246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5maW5kKCcuZmlsZWlucHV0LWJ1dHRvbiBpbnB1dCcpXG4gICAgICAgICAgICAgICAgLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAucGFyZW50KCkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2luaXRUZW1wbGF0ZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucy50ZW1wbGF0ZXNDb250YWluZXIgPSB0aGlzLmRvY3VtZW50WzBdLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5maWxlc0NvbnRhaW5lci5wcm9wKCdub2RlTmFtZScpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHRtcGwpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy51cGxvYWRUZW1wbGF0ZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudXBsb2FkVGVtcGxhdGUgPSB0bXBsKG9wdGlvbnMudXBsb2FkVGVtcGxhdGVJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmRvd25sb2FkVGVtcGxhdGVJZCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmRvd25sb2FkVGVtcGxhdGUgPSB0bXBsKG9wdGlvbnMuZG93bmxvYWRUZW1wbGF0ZUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2luaXRGaWxlc0NvbnRhaW5lcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5maWxlc0NvbnRhaW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5maWxlc0NvbnRhaW5lciA9IHRoaXMuZWxlbWVudC5maW5kKCcuZmlsZXMnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIShvcHRpb25zLmZpbGVzQ29udGFpbmVyIGluc3RhbmNlb2YgJCkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZpbGVzQ29udGFpbmVyID0gJChvcHRpb25zLmZpbGVzQ29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBfaW5pdFNwZWNpYWxPcHRpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICAgICAgdGhpcy5faW5pdEZpbGVzQ29udGFpbmVyKCk7XG4gICAgICAgICAgICB0aGlzLl9pbml0VGVtcGxhdGVzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2NyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0RmluaXNoZWREZWZlcnJlZHMoKTtcbiAgICAgICAgICAgIGlmICghJC5zdXBwb3J0LmZpbGVJbnB1dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVGaWxlSW5wdXRCdXR0b24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBlbmFibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB3YXNEaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIHdhc0Rpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgICAgICBpZiAod2FzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQsIGJ1dHRvbicpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VuYWJsZUZpbGVJbnB1dEJ1dHRvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2FibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmZpbmQoJ2lucHV0LCBidXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVGaWxlSW5wdXRCdXR0b24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIH1cblxuICAgIH0pO1xuXG59KSk7XG4iXX0=
