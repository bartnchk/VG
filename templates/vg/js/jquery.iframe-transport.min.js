"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"===("undefined"==typeof exports?"undefined":_typeof(exports))?require("jquery"):window.jQuery)}(function(e){var t=0,r=e,n="parseJSON";"JSON"in window&&"parse"in JSON&&(r=JSON,n="parse"),e.ajaxTransport("iframe",function(r){if(r.async){var n,o,a,p=r.initialIframeSrc||"javascript:false;";return{send:function(i,f){n=e('<form style="display:none;"></form>'),n.attr("accept-charset",r.formAcceptCharset),a=/\?/.test(r.url)?"&":"?","DELETE"===r.type?(r.url=r.url+a+"_method=DELETE",r.type="POST"):"PUT"===r.type?(r.url=r.url+a+"_method=PUT",r.type="POST"):"PATCH"===r.type&&(r.url=r.url+a+"_method=PATCH",r.type="POST"),t+=1,o=e('<iframe src="'+p+'" name="iframe-transport-'+t+'"></iframe>').bind("load",function(){var t,a=e.isArray(r.paramName)?r.paramName:[r.paramName];o.unbind("load").bind("load",function(){var t;try{if(t=o.contents(),!t.length||!t[0].firstChild)throw new Error}catch(e){t=void 0}f(200,"success",{iframe:t}),e('<iframe src="'+p+'"></iframe>').appendTo(n),window.setTimeout(function(){n.remove()},0)}),n.prop("target",o.prop("name")).prop("action",r.url).prop("method",r.type),r.formData&&e.each(r.formData,function(t,r){e('<input type="hidden"/>').prop("name",r.name).val(r.value).appendTo(n)}),r.fileInput&&r.fileInput.length&&"POST"===r.type&&(t=r.fileInput.clone(),r.fileInput.after(function(e){return t[e]}),r.paramName&&r.fileInput.each(function(t){e(this).prop("name",a[t]||r.paramName)}),n.append(r.fileInput).prop("enctype","multipart/form-data").prop("encoding","multipart/form-data"),r.fileInput.removeAttr("form")),n.submit(),t&&t.length&&r.fileInput.each(function(r,n){var o=e(t[r]);e(n).prop("name",o.prop("name")).attr("form",o.attr("form")),o.replaceWith(n)})}),n.append(o).appendTo(document.body)},abort:function(){o&&o.unbind("load").prop("src",p),n&&n.remove()}}}}),e.ajaxSetup({converters:{"iframe text":function(t){return t&&e(t[0].body).text()},"iframe json":function(t){return t&&r[n](e(t[0].body).text())},"iframe html":function(t){return t&&e(t[0].body).html()},"iframe xml":function(t){var r=t&&t[0];return r&&e.isXMLDoc(r)?r:e.parseXML(r.XMLDocument&&r.XMLDocument.xml||e(r.body).html())},"iframe script":function(t){return t&&e.globalEval(e(t[0].body).text())}}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
