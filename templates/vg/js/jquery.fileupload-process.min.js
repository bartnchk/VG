"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e){"function"==typeof define&&define.amd?define(["jquery","./jquery.fileupload"],e):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?e(require("jquery"),require("./jquery.fileupload")):e(window.jQuery)}(function(e){var r=e.blueimp.fileupload.prototype.options.add;e.widget("blueimp.fileupload",e.blueimp.fileupload,{options:{processQueue:[],add:function(s,o){var t=e(this);o.process(function(){return t.fileupload("process",o)}),r.call(this,s,o)}},processActions:{},_processFile:function(r,s){var o=this,t=e.Deferred().resolveWith(o,[r]),i=t.promise();return this._trigger("process",null,r),e.each(r.processQueue,function(r,t){var n=function(r){return s.errorThrown?e.Deferred().rejectWith(o,[s]).promise():o.processActions[t.action].call(o,r,t)};i=i.then(n,t.always&&n)}),i.done(function(){o._trigger("processdone",null,r),o._trigger("processalways",null,r)}).fail(function(){o._trigger("processfail",null,r),o._trigger("processalways",null,r)}),i},_transformProcessQueue:function(r){var s=[];e.each(r.processQueue,function(){var o={},t=this.action,i=!0===this.prefix?t:this.prefix;e.each(this,function(s,t){"string"===e.type(t)&&"@"===t.charAt(0)?o[s]=r[t.slice(1)||(i?i+s.charAt(0).toUpperCase()+s.slice(1):s)]:o[s]=t}),s.push(o)}),r.processQueue=s},processing:function(){return this._processing},process:function(r){var s=this,o=e.extend({},this.options,r);return o.processQueue&&o.processQueue.length&&(this._transformProcessQueue(o),0===this._processing&&this._trigger("processstart"),e.each(r.files,function(t){var i=t?e.extend({},o):o,n=function(){return r.errorThrown?e.Deferred().rejectWith(s,[r]).promise():s._processFile(i,r)};i.index=t,s._processing+=1,s._processingQueue=s._processingQueue.then(n,n).always(function(){s._processing-=1,0===s._processing&&s._trigger("processstop")})})),this._processingQueue},_create:function(){this._super(),this._processing=0,this._processingQueue=e.Deferred().resolveWith(this).promise()}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
